# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

# https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs-or-python
name: Python application

# on: [push, pull_request, workflow_dispatch]
on:
  push:
    branches: [ main ]

  pull_request:
    branches: [ main ]

  # run manually
  workflow_dispatch:
  
  # runs our tests every Sunday at midnight.
  #schedule:
  #  - cron:  '0 0 * * 0'

jobs:
  build:

    #runs-on: ${{ matrix.os }}
    runs-on: ubuntu-latest
    #strategy:
    #  matrix:
    #    os: [ubuntu-latest, macos-latest, windows-latest]
    #    python-version: [3.6, 3.7, 3.8, 3.9, pypy2, pypy3]
    #     exclude:
    #        - os: macos-latest
    #          python-version: 3.6
    #        - os: windows-latest
    #         python-version: 3.6
    env:
      FIB_INPUT: 10

    steps:
      - uses: actions/checkout@v2
      
      #- name: Set up Python ${{ matrix.python-version }}
      - name: Set up Python 3.10
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
          # python-version: ${{ matrix.python-version }}
          # Optional - x64 or x86 architecture, defaults to x64
          #architecture: 'x64'
          #cache: 'pip'
      
      # You can test your matrix by printing the current Python version
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      #- name: Install Tox and any other packages
      #  run: pip install tox
        
      #- name: Run Tox
        # Run tox using the version of Python in `PATH`
      #  run: tox -e py
      
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Test with pytest
        run: |
          #pytest app.py
          pytest app.py --doctest-modules --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
